{
  "contractName": "ChallengeSystem",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "skills",
      "outputs": [
        {
          "name": "id",
          "type": "uint256"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "attirbuteId",
          "type": "uint256"
        },
        {
          "name": "addAttributePercentaje",
          "type": "bool"
        },
        {
          "name": "attributeBonus",
          "type": "uint256"
        },
        {
          "name": "winExperienceBonus",
          "type": "uint256"
        },
        {
          "name": "loseExperienceBonus",
          "type": "uint256"
        },
        {
          "name": "elementalAdvantageBonus",
          "type": "uint256"
        },
        {
          "name": "elementalDisadvantageBonus",
          "type": "uint256"
        },
        {
          "name": "randomAttributeBonus",
          "type": "uint256"
        },
        {
          "name": "has5LevelBonus",
          "type": "bool"
        },
        {
          "name": "preferedAttributeIncreasedChance",
          "type": "bool"
        },
        {
          "name": "fertileSpeedBonus",
          "type": "bool"
        },
        {
          "name": "isSkill",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506102cc806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806350d15fbe14610046575b600080fd5b34801561005257600080fd5b506100716004803603810190808035906020019092919050505061015b565b604051808f8152602001806020018e81526020018d1515151581526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018615151515815260200185151515158152602001841515151581526020018315151515815260200182810382528f818151815260200191508051906020019080838360005b838110156101135780820151818401526020810190506100f8565b50505050905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509f5050505050505050505050505050505060405180910390f35b6000602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff169080600401549080600501549080600601549080600701549080600801549080600901549080600a0160009054906101000a900460ff169080600a0160019054906101000a900460ff169080600a0160029054906101000a900460ff169080600a0160039054906101000a900460ff1690508e5600a165627a7a72305820d3c5b7a51a5ae6576012417a602bae781559225a7741742a7ac9e04e9cf2e9320029",
  "deployedBytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806350d15fbe14610046575b600080fd5b34801561005257600080fd5b506100716004803603810190808035906020019092919050505061015b565b604051808f8152602001806020018e81526020018d1515151581526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018615151515815260200185151515158152602001841515151581526020018315151515815260200182810382528f818151815260200191508051906020019080838360005b838110156101135780820151818401526020810190506100f8565b50505050905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509f5050505050505050505050505050505060405180910390f35b6000602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff169080600401549080600501549080600601549080600701549080600801549080600901549080600a0160009054906101000a900460ff169080600a0160019054906101000a900460ff169080600a0160029054906101000a900460ff169080600a0160039054906101000a900460ff1690508e5600a165627a7a72305820d3c5b7a51a5ae6576012417a602bae781559225a7741742a7ac9e04e9cf2e9320029",
  "sourceMap": "116:8058:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;116:8058:2;;;;;;;",
  "deployedSourceMap": "116:8058:2:-;;;;;;;;;;;;;;;;;;;;;;;;575:37:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;575:37:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;575:37:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.4.24;\n\nimport \"./BeastBase.sol\";\nimport \"./ExperienceSystems.sol\";\nimport \"./SkillsSystem.sol\";\n\ncontract ChallengeSystem is AccessControl, ExperienceSystems {\n     /*\n    struct Challenge {\n        uint id;\n        string name;\n        bool isActive;\n        uint minLevelRequired;\n        uint strengthPonderation;\n        uint dexterityPonderation;\n        uint endurancePonderation;\n        uint knowledgePonderation;\n        uint wisdomPonderation;\n        uint charismaPonderation;\n        uint randomFactor; // How much you can add to the sum calculation.\n        uint experienceSystemId;\n        bool isChallenge;\n    }\n\n    mapping (uint => Challenge) public challenges;\n\n    modifier ownerOf(uint _beastId) {\n        require(msg.sender == beastIndexToOwner[_beastId]);\n        _;\n    }   \n\n    function challengeExists( uint challengeId) internal view returns(bool) {\n        return challenges[challengeId].isChallenge;\n    }\n   \n    // Create a new challenge, important to have Unique ID\n    function createChallenge(\n        uint _id, \n        string _name, \n        uint _minLevelRequired, \n        uint _strengthPonderation, \n        uint _dexterityPonderation, \n        uint _endurancePonderation, \n        uint _knowledgePonderation, \n        uint _wisdomPonderation, \n        uint _charismaPonderation, \n        uint _randomFactor, \n        uint _experienceSystemId\n    ) external onlyCOO {\n        require(!challengeExists(_id)); // prevents destruction of existing challenge with same ID\n        Challenge memory _challenge = Challenge({\n            id: _id,\n            name: _name,\n            isActive: true,\n            minLevelRequired: _minLevelRequired,\n            strengthPonderation: _strengthPonderation,\n            dexterityPonderation: _dexterityPonderation,\n            endurancePonderation: _endurancePonderation,\n            knowledgePonderation: _knowledgePonderation,\n            wisdomPonderation: _wisdomPonderation,\n            charismaPonderation: _charismaPonderation,\n            randomFactor: _randomFactor,\n            experienceSystemId: _experienceSystemId,\n            isChallenge: true\n        });\n        challenges[_id] = _challenge;\n    }\n\n    // Edit a deployed challenge, only you can change active, exp system, isActive and minLevelRequired\n    function editChallenge(\n        uint _challengeId, \n        bool _isActive, \n        uint _randomFactor, \n        uint _experienceSystemId, \n        uint _minLevelRequired\n    ) external onlyCOO {\n        Challenge storage _challenge = challenges[_challengeId];\n        _challenge.isActive = _isActive;\n        _challenge.randomFactor = _randomFactor;\n        _challenge.experienceSystemId = _experienceSystemId;\n        _challenge.minLevelRequired = _minLevelRequired;\n    }\n\n    // Function that executes a challenge, here we calculate winner and handle Exp + Ranking.\n    function challengeBeast(uint _challengerId, uint _challengedId, uint _challengeId) external ownerOf(_challengerId) returns(uint) {\n        require(challenges[_challengeId].isActive == true);\n\n        Challenge memory _challenge = challenges[_challengeId];\n        require(beasts[_challengerId].level >= _challenge.minLevelRequired);\n\n        Beast storage _challenger = beasts[_challengerId];\n        Beast storage _challenged = beasts[_challengedId];\n        //uint challengerBonus = 0;\n\n        uint challengerSum = _challenge.strengthPonderation * _challenger.attrs.strength;\n        challengerSum += _challenge.dexterityPonderation * _challenger.attrs.dexterity;\n        challengerSum += _challenge.endurancePonderation * _challenger.attrs.endurance;\n        challengerSum += _challenge.knowledgePonderation * _challenger.attrs.knowledge;\n        challengerSum += _challenge.wisdomPonderation * _challenger.attrs.wisdom;\n        challengerSum += _challenge.charismaPonderation * _challenger.attrs.charisma;\n        challengerSum += uint(keccak256(block.difficulty, now, _challengerId)) % _challenge.randomFactor;\n        challengerSum += skillAttributeBonus(_challengerId);\n\n        uint challengedSum = _challenge.strengthPonderation * _challenged.attrs.strength;\n        challengedSum += _challenge.dexterityPonderation * _challenged.attrs.dexterity;\n        challengedSum += _challenge.endurancePonderation * _challenged.attrs.endurance;\n        challengedSum += _challenge.knowledgePonderation * _challenged.attrs.knowledge;\n        challengedSum += _challenge.wisdomPonderation * _challenged.attrs.wisdom;\n        challengedSum += _challenge.charismaPonderation * _challenged.attrs.charisma;\n        challengedSum += uint(keccak256(block.difficulty, now, _challengedId)) % _challenge.randomFactor;\n        challengedSum += skillAttributeBonus(_challengedId);\n\n        if (elementBonus(_challengerId, _challengedId) == _challengerId) {\n            challengerSum = challengerSum * skillElementBonus(_challengerId, _challengedId);\n        } else if (elementBonus(_challengerId, _challengedId) == _challengedId) {\n            challengedSum = challengedSum * skillElementBonus(_challengerId, _challengedId);\n        }\n\n        uint winnerId = 0;\n        uint looserId = 0;\n\n        if (challengerSum > challengedSum) {\n            winnerId = _challengerId;\n            looserId = _challengedId;\n            // TODO: Ranking\n        } else {\n            winnerId = _challengedId;\n            looserId = _challengerId;\n            // TODO: Ranking\n        }\n        calculateExperience(_challenge.experienceSystemId, winnerId, looserId);\n        calculateLevel(_challenger.experience, _challenger.level);\n        calculateLevel(_challenged.experience, _challenged.level);\n\n        return winnerId;\n    }\n\n    // Earth = 0, Water = 1, Fire = 2, Air = 3.\n    // Water bonus over Fire\n    // Fire bonus over Air\n    // Air bonus over Earth\n    // Earth bonus over Water\n    function elementBonus(uint _challengerId, uint _challengedId) internal returns(uint) {\n        Beast storage _challenger = beasts[_challengerId];\n        Beast storage _challenged = beasts[_challengedId];\n        if (\n            (_challenger.element == 0 && _challenged.element == 1) ||\n            (_challenger.element == 1 && _challenged.element == 2) || \n            (_challenger.element == 2 && _challenged.element == 3) || \n            (_challenger.element == 3 && _challenged.element == 0)\n        ) {\n            return _challengerId;\n        } else if (\n                (_challenger.element == 1 && _challenged.element == 0) || \n                (_challenger.element == 2 && _challenged.element == 1) || \n                (_challenger.element == 3 && _challenged.element == 2) || \n                (_challenger.element == 0 && _challenged.element == 3)) \n            {\n            return _challengedId;\n        } else {\n            return 0;\n        }\n    }\n\n    function skillAttributeBonus(uint _beastId) internal returns(uint) {\n        Beast memory _beast = beasts[_beastId];\n        Skill memory skill = skills[_beast.skillId];\n        if (skill.addAttributePercentaje == true) {\n            return skillValue(skill.attirbuteId, _beastId) * skill.attributeBonus;\n        } else {\n            return skillValue(skill.attirbuteId, _beastId) + skill.attributeBonus;\n        }\n    }\n\n    function skillElementBonus(uint _challengerId, uint _challengedId) internal returns(uint) {\n        Beast storage _challenger = beasts[_challengerId];\n        Beast storage _challenged = beasts[_challengedId];\n\n        Skill memory _challengerSkill = skills[_challenger.skillId];\n        Skill memory _challengedSkill = skills[_challenged.skillId];\n\n        return 0;\n        // TODO: Refactor\n        if(_challengerSkill.elementalAdvantageBonus == true && _challengedSkill.elementalDisadvantageBonus == false) {\n            return 1.2;\n        } else if(_challengerSkill.elementalAdvantageBonus == true && _challengedSkill.elementalDisadvantageBonus == true) {\n            return 1.1;\n        } else if(_challengerSkill.elementalAdvantageBonus == false && _challengedSkill.elementalDisadvantageBonus == true) {\n            return 1.05;\n        } else {\n            return 1.1;\n        }\n        \n    }\n    */\n}\n\n",
  "sourcePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/ChallengeSystem.sol",
  "ast": {
    "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/ChallengeSystem.sol",
    "exportedSymbols": {
      "ChallengeSystem": [
        23
      ]
    },
    "id": 24,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/BeastBase.sol",
        "file": "./BeastBase.sol",
        "id": 16,
        "nodeType": "ImportDirective",
        "scope": 24,
        "sourceUnit": 14,
        "src": "26:25:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/ExperienceSystems.sol",
        "file": "./ExperienceSystems.sol",
        "id": 17,
        "nodeType": "ImportDirective",
        "scope": 24,
        "sourceUnit": 36,
        "src": "52:33:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/SkillsSystem.sol",
        "file": "./SkillsSystem.sol",
        "id": 18,
        "nodeType": "ImportDirective",
        "scope": 24,
        "sourceUnit": 88,
        "src": "86:28:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 19,
              "name": "AccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 119,
              "src": "144:13:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControl_$119",
                "typeString": "contract AccessControl"
              }
            },
            "id": 20,
            "nodeType": "InheritanceSpecifier",
            "src": "144:13:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 21,
              "name": "ExperienceSystems",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 35,
              "src": "159:17:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ExperienceSystems_$35",
                "typeString": "contract ExperienceSystems"
              }
            },
            "id": 22,
            "nodeType": "InheritanceSpecifier",
            "src": "159:17:2"
          }
        ],
        "contractDependencies": [
          5,
          13,
          35,
          87,
          119,
          133
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 23,
        "linearizedBaseContracts": [
          23,
          35,
          87,
          5,
          13,
          119,
          133
        ],
        "name": "ChallengeSystem",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 24,
        "src": "116:8058:2"
      }
    ],
    "src": "0:8176:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/ChallengeSystem.sol",
    "exportedSymbols": {
      "ChallengeSystem": [
        23
      ]
    },
    "id": 24,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:2"
      },
      {
        "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/BeastBase.sol",
        "file": "./BeastBase.sol",
        "id": 16,
        "nodeType": "ImportDirective",
        "scope": 24,
        "sourceUnit": 14,
        "src": "26:25:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/ExperienceSystems.sol",
        "file": "./ExperienceSystems.sol",
        "id": 17,
        "nodeType": "ImportDirective",
        "scope": 24,
        "sourceUnit": 36,
        "src": "52:33:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jonathanaraneda/BlockchainProjects/unis_dinos/contracts/SkillsSystem.sol",
        "file": "./SkillsSystem.sol",
        "id": 18,
        "nodeType": "ImportDirective",
        "scope": 24,
        "sourceUnit": 88,
        "src": "86:28:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 19,
              "name": "AccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 119,
              "src": "144:13:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControl_$119",
                "typeString": "contract AccessControl"
              }
            },
            "id": 20,
            "nodeType": "InheritanceSpecifier",
            "src": "144:13:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 21,
              "name": "ExperienceSystems",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 35,
              "src": "159:17:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ExperienceSystems_$35",
                "typeString": "contract ExperienceSystems"
              }
            },
            "id": 22,
            "nodeType": "InheritanceSpecifier",
            "src": "159:17:2"
          }
        ],
        "contractDependencies": [
          5,
          13,
          35,
          87,
          119,
          133
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 23,
        "linearizedBaseContracts": [
          23,
          35,
          87,
          5,
          13,
          119,
          133
        ],
        "name": "ChallengeSystem",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 24,
        "src": "116:8058:2"
      }
    ],
    "src": "0:8176:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-07-25T04:03:11.587Z"
}